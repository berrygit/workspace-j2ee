package maze;

public class MazeWithRecursion
{
	static int[][] maze =
	{
	{ 1, 1, 1, 1, 1 },
	{ 0, 0, 1, 1, 1 },
	{ 1, 0, 0, 0, 1 },
	{ 1, 0, 1, 0, 0 },
	{ 1, 1, 1, 1, 1 } };

	static int[][] visited = new int[5][5];
	static int[][] path = new int[5][5];

	public static void main(String[] args)
	{
		initial(visited);
		initial(path);

		Point p = new Point();
		p.setX(1);
		p.setY(0);
		passTheMaze(p);

		printAnswer(path);
	}

	/**
	 * 输出答案
	 * 
	 * @param path
	 *            答案所在地
	 */
	private static void printAnswer(int[][] path)
	{
		for (int[] is : path)
		{
			for (int i : is)
			{
				System.out.print(is[i]);
			}

			System.out.println();
		}
	}

	/**
	 * 设置访问标记
	 * 
	 * @param p
	 *            访问位置
	 */
	private static void setVisited(Point p)
	{
		visited[p.getX()][p.getY()] = 1;
	}

	private static void setPath(Point p)
	{
		path[p.getX()][p.getY()] = 1;
	}

	/**
	 * 初始化
	 * 
	 * @param array
	 *            待初始化数组
	 */
	private static void initial(int[][] array)
	{
		for (int[] is : array)
		{
			for (int i : is)
			{
				is[i] = 0;
			}
		}
	}

	private static boolean passTheMaze(Point p)
	{
		if (visited(p))
		{
			return false;
		}

		if (isExit(p))
		{
			return true;
		}

		Point left = p.clone();
		if (moveLeft(left))
		{
			if (passTheMaze(left))
			{
				setPath(left);
				return true;
			}
		}

		Point up = p.clone();
		if (moveUp(up))
		{
			if (passTheMaze(up))
			{
				setPath(left);
				return true;
			}
		}

		Point right = p.clone();
		if (moveRight(right))
		{
			if (passTheMaze(right))
			{
				setPath(left);
				return true;
			}
		}

		Point down = p.clone();
		if (moveDown(down))
		{
			if (passTheMaze(down))
			{
				setPath(left);
				return true;
			}
		}

		return false;
	}

	/**
	 * 探测访问是否可以进行
	 * 
	 * @param p
	 *            原位置
	 * @param temp
	 *            待访问位置
	 * @return 是否成功
	 */
	private static boolean testMoveable(Point p, Point temp)
	{
		// 判断是否越界或是墙壁
		if (getOutBound(temp) || isWall(temp))
		{
			return false;
		}
		else
		{
			// 移动标记
			p = temp;
			setVisited(p);
			return true;
		}
	}

	/**
	 * 向左走
	 * 
	 * @param p位置
	 * @return是否成功
	 */
	private static boolean moveLeft(Point p)
	{
		// 克隆位置
		Point temp = p.clone();
		temp.setY(temp.getY() - 1);

		return testMoveable(p, temp);
	}

	/**
	 * 向上走
	 * 
	 * @param p位置
	 * @return是否成功
	 */
	private static boolean moveUp(Point p)
	{
		// 克隆位置
		Point temp = p.clone();
		temp.setX(temp.getX() - 1);

		return testMoveable(p, temp);
	}

	/**
	 * 向右走
	 * 
	 * @param p位置
	 * @return 是否成功
	 */
	private static boolean moveRight(Point p)
	{
		// 克隆位置
		Point temp = p.clone();
		temp.setY(temp.getY() + 1);

		return testMoveable(p, temp);
	}

	/**
	 * 向下走
	 * 
	 * @param p位置
	 * @return是否成功
	 */
	private static boolean moveDown(Point p)
	{
		// 克隆位置
		Point temp = p.clone();
		temp.setX(temp.getX() + 1);

		return testMoveable(p, temp);
	}

	/**
	 * 判断是否是墙
	 * 
	 * @param p
	 *            位置
	 * @return 是否是墙
	 */
	private static boolean isWall(Point p)
	{
		if (1 == maze[p.getX()][p.getY()])
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * 是否是出口
	 * 
	 * @param p
	 *            位置
	 * @return 是否是出口
	 */
	private static boolean isExit(Point p)
	{
		if (((maze.length - 2) == p.getX()) && ((maze.length - 1) == p.getY()))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * 是否曾经访问过
	 * 
	 * @param p位置
	 * @return是否曾经访问过
	 */
	private static boolean visited(Point p)
	{
		if (1 == maze[p.getX()][p.getY()])
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * 是否越界
	 * 
	 * @param p
	 *            位置
	 * @return 是否越界
	 */
	private static boolean getOutBound(Point p)
	{
		if (((0 <= p.getX()) && (p.getX() < maze.length))
				&& ((0 <= p.getY()) && (p.getY() < maze.length)))
		{
			return false;
		}
		else
		{
			return true;
		}
	}
}
